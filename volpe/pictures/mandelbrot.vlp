# local Volpe imports
ppm_image := $ppm_image\ppm_image
complex := $math\complex

###### PARAMS ######
WIDTH := 1920
HEIGHT := 1080

START_IM := -1.125
END_IM := 1.125

START_RE := -2.5
END_RE := 1.5

MAX_COUNT := 300
BRIGHTNESS := 500
####################

STEP_IM := (END_IM - START_IM) / HEIGHT.0
STEP_RE := (END_RE - START_RE) / WIDTH.0

# finds for how many repetitions z remains bounded
eval_c := (c) {
    (z, count) {
        z.norm_squared > 4.0 || count > MAX_COUNT -> count
        @(z.mult(z).add(c), count + 1)
    } (complex(0.0, 0.0), 0)
}

mandelbrot := (x, y) {
    c := complex(START_RE + STEP_RE * x.0, START_IM + STEP_IM * y.0)
    count_reached := eval_c(c, MAX_COUNT)

    # inside is black
    count_reached > MAX_COUNT -> (r: 0, g: 0, b: 0)
    # outside is brighter nearby
    val := count_reached * BRIGHTNESS / MAX_COUNT
    (r: 0, g: val, b: val / 3)
}

ppm_image("mandelbrot.ppm\0", WIDTH, HEIGHT, mandelbrot)
