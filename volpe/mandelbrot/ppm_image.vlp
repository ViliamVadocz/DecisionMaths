# Importing file operations
open := $$MinGW\include\stdio\fopen
close := $$MinGW\include\stdio\fclose
write_char := $$MinGW\include\stdio\fputc
write_str := $$MinGW\include\stdio\fputs

# Integer to ASCII decimal
prepend := (text, end, char) {
    # shift to the right
    text := (text, i) {
        i = 0 -> text
        text[i] := text[i - 1]
        @(text, i - 1)
    } (text, end)
    text[0] := char
    text
}

last_digit := (x) {"0123456789"[x % 10]}
int_to_str := (x) {
    buffer, end := (buffer, end, x) {
        new_x := x / 10
        new_x = x -> {
            end > 0 -> buffer, end
            buffer[0] := '0'
            buffer, 1
        }
        buffer := prepend(buffer, end, last_digit(x))
        @(buffer, end + 1, new_x)
    } (['\x00'; 10], 0, {x < 0 -> -x; x})
    x < 0 -> prepend(buffer, end, '-')
    buffer
}

# PPM image format
make_image := (filename, pixels, width, height) {
    file := open(&filename, &"w\0")

    # header
    _ := write_str(&"P6\0", file)               # P6
    _ := write_char(32, file)                   # SPACE
    _ := write_str(&int_to_str(width), file)    # width
    _ := write_char(32, file)                   # SPACE
    _ := write_str(&int_to_str(height), file)   # height
    _ := write_char(32, file)                   # SPACE
    _ := write_str(&int_to_str(255), file)      # Maxval
    _ := write_char(32, file)                   # SPACE

    num_pixels := |pixels| / 3
    _ := (i, file) {
        i = num_pixels -> {}
        pixel := 3 * i
        _ := write_char(pixels[pixel], file)
        _ := write_char(pixels[pixel+1], file)
        _ := write_char(pixels[pixel+2], file)
        @(i + 1, file)
    } (0, file)
    _ := close(file)
}

make_image
