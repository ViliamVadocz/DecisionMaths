### printing ###

print := (str) {$printf(str :: "\n")}

last_digit := (x) {"0123456789"[x % 10]}

int_to_str := (x) {
    str := (n, str) {
        new_n := n / 10
        new_n = n -> {|str| > 0 -> str; "0"}
        char := last_digit(n)
        @(new_n, [char] :: str)
    } ({x < 0 -> -x; x}, [])
    x < 0 -> "-" :: str
    str
}

list_to_str := (list) {
    |list| = 0 -> "[]"
    (i, str) {
        i = |list| -> str :: "]"
        @(i + 1, str :: ", " :: int_to_str(list[i]))
    } (1, "[" :: int_to_str(list[0]))
}

### bools ####

true := 1 > 0
false := !true

### list functions ###

# tests whether an element is in a list
in := (list, elem) {
    (i) {
        i = |list| -> false
        list[i] = elem -> true
        @(i + 1)
    } (0)
}

# returns the first index which matches the element
index := (list, elem) {
    (i) {
        i >= |list| -> -1
        list[i] = elem -> i
        @(i + 1)
    } (0)
}

# get a slice of a list
slice := (list, start, end) {
    (start >= 0 && start < |list|)!
    (end >= start && end <= |list|)!
    (i, new_list) {
        i = end -> new_list
        @(i + 1, new_list :: [list[i]])
    } (start, [])
}

### math functions ###

pow := (a, n) {
    (base, product, power) {
        power = 0 -> product
        @(base, product * base, power - 1)
    } (a, 1, n)
}

### parsing integers ###

char_to_int := (c) {
    c = '1' -> 1
    c = '2' -> 2
    c = '3' -> 3
    c = '4' -> 4
    c = '5' -> 5
    c = '6' -> 6
    c = '7' -> 7
    c = '8' -> 8
    c = '9' -> 9
    0
}

parse_int := (str) {
    |str| = 0 -> 0

    negative := str[0] = '-'
    int_len := |str| - 1

    int := (i, int) {
        i = |str| -> int
        digit := char_to_int(str[i])
        to_add := digit * pow(10, int_len - i)
        @(i + 1, int + to_add)
    } ({negative -> 1; 0}, 0)

    {negative -> -int; int}
}

### parsing floats ###

parse_flt := (str) {
    |str| = 0 -> 0.0

    negative := str[0] = '-'
    point := index(str, '.')

    whole := slice(str, {negative -> 1; 0}, point)
    decimal := slice(str, point + 1, |str|)

    abs := parse_int(whole).0 + (parse_int(decimal).0 / pow(10, |decimal|).0)
    {negative -> -abs; abs}
}

### parse list ###

parse_list_flt := (str) {
    |str| < 3 -> []
    (i, out) {
        next := index(slice(str, i, |str|), ',') + i
        next < i -> out :: [parse_flt(slice(str, i, |str| - 1))]
        @(next + 1, out :: [parse_flt(slice(str, i, next))])
    } (1, [])
}

parse_list_int := (str) {
    |str| < 3 -> []
    (i, out) {
        next := index(slice(str, i, |str|), ',') + i
        next < i -> out :: [parse_int(slice(str, i, |str| - 1))]
        @(next + 1, out :: [parse_int(slice(str, i, next))])
    } (1, [])
}

#!
parse_list_char := (str) {
    |str| < 3 -> ""
    (i, out) {
        next := index(slice(str, i, |str|), ',') + i
        next < i -> out :: [str[|str|-3]]
        @(next + 1, out :: [str[next-2]])
    } (1, "")
}
!#

# parse_list(str) {
#     in(str, '.') -> parse_list_flt(str)
#     in(str, '\'') -> parse_list_char(str)
#     parse_list_int(str)
#     # parse_list_list???
# }

### pre-parsing ###

remove_whitespace := (str) {
    (i, out) {
        i = |str| -> out
        elem := str[i]
        elem <= ' ' || elem > '~' -> @(i + 1, out)
        @(i + 1, out :: [elem])
    } (0, [])
}

parse_list_flt(remove_whitespace("[134.23, 34.0120, 42.23, -94.3, 2.001, -0.68]"))